#本配置文件已经转为Spring配置文件，本配置可以视为参考，现在已经废弃
#请查看 resources/shiroContext.xml
[main]
#认证路径
authc.loginUrl=/actions/security/login
#本类是用来加密和解密的类
credentialsMatcher=org.apache.shiro.authc.credential.HashedCredentialsMatcher
#使用md5加密
credentialsMatcher.hashAlgorithmName=md5
#加密2次，就是把加密后的密码在加密一次
credentialsMatcher.hashIterations=2
#我也不懂
credentialsMatcher.storedCredentialsHexEncoded=true

#数据库相关信息
dataSource=com.alibaba.druid.pool.DruidDataSource
dataSource.driverClassName=com.mysql.jdbc.Driver
dataSource.url=jdbc:mysql://localhost:3306/blogspace
dataSource.username=root
dataSource.password=3333

#jdbcRealm，它才是我想要的Realm，而不是继承别的Realm，因为它直接与数据库交互
jdbcRealm=org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.dataSource=$dataSource
jdbcRealm.permissionsLookupEnabled=true
#相关解析器，这不是重点
jdbcRealm.saltStyle=COLUMN
#重写的SQL语句，非常important。Shiro的加密规律是   明文密码+加密规则（username+password_salt） = 密文密码
#本次SQL语句就是获取用户的加密规则，与用户在登录页面输入的帐号进行计算，得出相应的结果。
#如果这个结果 与 从数据库查询到的password是一致的，那么本次认证成功，否则失败
#see:https://blog.csdn.net/yanluandai1985/article/details/79216141
jdbcRealm.authenticationQuery=select password, concat(username,password_salt) from users where username = ?
jdbcRealm.userRolesQuery =select role from user_role ur join users u on u.id = ur.userId join roles r on ur.roleId = r.id where username = ?
jdbcRealm.permissionsQuery=select permission from roles r join role_permisssion rp on r.id = rp.roleId join permissions p on p.id = rp.permissionId where r.role = ?
#注入加密解密类
jdbcRealm.credentialsMatcher=$credentialsMatcher
securityManager.realms=$jdbcRealm

[filters]
#默认的Shiro配置，对发送的ajax请求无效，因此需要自己做一个拦截器
myAjaxFilter=domains.secutity.AjaxFilter

[urls]
#评论模块的操作需要登录
/actions/comment/**=myAjaxFilter,perms[comment]
#读文章需要读文章的权限
#/actions/article/readArticle/**=authc,perms[readArticle]
#进入后台管理员登录页面需要相关的身份
/actions/home=authc,roles[admin],perms[enterSystem]
#写文章
/actions/article/postedit=authc,perms[postedit]
#退出，注销当前的subject
/actions/home/logout=logout

#Shiro请求测试
#/actions/test=authc,roles[admin]
#/actions/test2=authc,perms[comment]
#/actions/test3=authc,perms[postedit]


